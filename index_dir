#!/usr/bin/env bash

# Reads markdown files from "dir" and parses out any files with a front matter.
# A series of href links is constructed and echoed out. The links are in the
# form of:
#
# ${date}\n ${link with title}\n
#
# Date must be in the format: YYYY MMM DD such as 2026 Mar 24.
# This allows this script to reliably sort the note references by date.

notes=""
html=""

declare -A months

die() {
      echo "$1"
      exit 2
}

trim() {
  read -rd '' $1 <<<"${!1}"
}

parse_file() {
  local file=$1

  local start=false
  local title=""
  local date=""
  while read -r line; do
    if [[ $start == false ]]; then
      if [[ $line == "---" ]]; then
	start=true
	continue
      else
	die "No front matter found at the start for ${file}! It might be missing a '---'."
      fi
    fi

    if [[ $line == title:* ]]; then
      title="${line#"title:"}"
      trim title
    elif [[ $line == date:* ]]; then
      date="${line#"date:"}"
      trim date
    elif [[ $line = "---" ]]; then
      if [[ -n $title && -n $date ]]; then
	notes+="${date};${file/%md/html};${title}"$'\n'
      else
	die "Could not find name and date in front matter of ${file}!"
      fi
    fi
  done < "$file"
}

index_archive() {
  year=""
  while IFS=$'\n' read -r note; do
    IFS=";"
    data=($note)

    date="${data[0]}"
    file="${data[1]}"
    title="${data[2]}"

    curr="${date:0:4}"
    if [[ $curr != $year ]]; then
      if [[ -n $year ]]; then
	html+="</div>"
	html+="</div>"
      fi

      html+="<h2>${curr}</h2>"

      html+="<div class='row row-start row-stretch row-gap'>"			# need close
	html+="<div class='row'>"
	  html+="<div class='medium_spacer space_navbar'></div>"
	  html+="<div>&nbsp;</div>"
	  html+="<div class='small_spacer space_navbar'></div>"
	html+="</div>"
	html+="<div class='column column-gap'>"					# need close
      year="${curr}"
    fi

    html+="<a class='flatbutton flatbutton-minwidth-largest' href='${file/md/html}'>"
      html+="<div class='row row-start'>"
	html+="<div class=square_icon></div>${title}<div class='align_self_end'>$(date -d "${date}" +'%b %d')</div>"
      html+="</div>"
    html+="</a>"

  done <<< $(sort -srk 1 -t ";" <<< "$notes")
  unset IFS
}

index_notes() {
  year=""
  html+="<div class='row row-start row-stretch row-gap'>"			# need close
  html+="<div class='row'>"
  html+="<div class='medium_spacer space_navbar'></div>"
  html+="<div>&nbsp;</div>"
  html+="<div class='small_spacer space_navbar'></div>"
  html+="</div>"
  html+="<div class='column column-gap'>"					# need close
  while IFS=$'\n' read -r note; do
    IFS=";"
    data=($note)

    date="${data[0]}"
    file="${data[1]}"
    title="${data[2]}"

    html+="<a class='flatbutton flatbutton-minwidth-largest' href='${file/md/html}'>"
      html+="<div class='row row-start'>"
	html+="<div class=square_icon></div>${title}<div class='align_self_end'>$(date -d "${date}" +'%b %d')</div>"
      html+="</div>"
    html+="</a>"

  done <<< $(sort -srk 1 -t ";" <<< "$notes")
  html+="</div>"
  html+="</div>"
  unset IFS
}

main() {
  dir=$1

  if [[ -z "$dir" ]]; then
    die "Please specify a directory!"
  fi

  for file in "${dir}"/*.md; do
    if [ -e "$file" ]; then
      parse_file "$file"
    fi
  done

  # hacky
  if [[ $dir == "blogs" ]]; then
    index_archive
  else
    index_notes
  fi

  echo "$html"
}

main "$1"
